import logging
import os
import re

from dotenv import load_dotenv
import random

import sqlalchemy
from sqlalchemy.orm import sessionmaker
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

from create_db import create_db
from models import Words, Users, UserWords

load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î
create_db()

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
def init_db():
    DNS = os.getenv('DNS')
    engine = sqlalchemy.create_engine(DNS)
    Session = sessionmaker(bind=engine)
    session = Session()
    return session

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def user_list():
    with init_db() as session:
        users = session.query(Users).all()
        users = [user.cid for user in users]
        session.close()
        return users

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
def add_users(user_id):
    with init_db() as session:
        session.add(Users(cid=user_id))
        session.commit()
        session.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤
def get_words(user_id):
    with init_db() as session:
        words = session.query(UserWords.word, UserWords.translate).\
            join(Users, Users.id == UserWords.id_user).\
            where(Users.cid == user_id).all()
        all_words = session.query(Words.word, Words.translate).all()
        words_list = all_words + words
        result = random.sample(words_list, 4)
        session.close()
        return result

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user_word(user_id, word, translate):
    with init_db() as session:
        id_user = session.query(Users.id).filter(Users.cid == user_id)
        session.add(UserWords(word=word, translate=translate, id_user=id_user))
        session.commit()
        session.close()

# –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_count_user_words(user_id):
    with init_db() as session:
        total_words = session.query(UserWords.word).\
            join(Users, Users.id == UserWords.id_user).\
            where(Users.cid == user_id).count()
        session.close()
        return total_words


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def get_user_added_words(user_id):
    with init_db() as session:
        total_words = session.query(UserWords.id, UserWords.word, UserWords.translate).\
            join(Users, Users.id == UserWords.id_user).\
            where(Users.cid == user_id).all()
        session.close()
        return total_words


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_words(word_id, user_id):
    with init_db() as session:
        us_id = session.query(UserWords.id_user). \
            join(Users, Users.id == UserWords.id_user). \
            where(Users.cid == user_id)
        word = session.query(UserWords).\
            where(UserWords.id == word_id,\
                   UserWords.id_user == us_id).one()
        session.delete(word)
        session.commit()
        session.close()


print('Start telegram bot...')

state_storage = StateMemoryStorage()   # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
token = os.getenv('TOKEN')
bot = TeleBot(token, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []
user_current_word = {}

# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
def show_hint(*lines):
    return '\n'.join(lines)

# –°–æ–µ–¥–∏–Ω—è–µ—Ç –ø–∞—Ä—É —Å–ª–æ–≤, —Ü–µ–ª–µ–≤–æ–µ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
def show_target(data):
    return f'{data['target_word']} -> {data['translate_word']}'


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


# –ö–ª–∞—Å—Å –ø–æ–∑–≤. —Å–æ–∑–¥. –ø–æ–¥–∫–ª–∞—Å—Å—ã StateGroup –∏ —Å–æ–∑–¥. –≤ –Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω. –∫–æ—Ç. –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫–∑. –∫–ª–∞—Å—Å–∞ State
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    other_words = State()


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑-—é –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É(uid)
def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['words', 'start'])
def create_words(message):
    types.ReplyKeyboardRemove()
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        add_users(cid)
        userStep[cid] = 0
        bot.send_message(cid, """–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å\
 –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
 
 –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\
 –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
 
 –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
 —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
 
 –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start""")

    markup = types.ReplyKeyboardMarkup(row_width=2)  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏

    global buttons
    buttons = []
    word = get_words(cid)
    target_word = word[0][0]
    translate = word[0][1]
    target_word_btn = types.KeyboardButton(target_word) # –ö–Ω–æ–ø–∫–∞ –¥–ª—è target_word
    buttons.append(target_word_btn)
    others = (word[1][0], word[2][0], word[3][0]) #[word for word in get_word[1:]] # –ë–µ—Ä—ë–º –∏–∑ –ë–î 3 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä—ã –∏–∑ –≤—ã–±–æ—Ä–∫–∏
    others_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(others_words_btns)
    random.shuffle(buttons)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)

    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)

    greeting = f'–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nRU - {translate}'
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others
    buttons.clear()


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_words(message):
    create_words(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:')


@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 1)
def add_word_get_word(message):
    try:
        word = message.text.lower()
        if not re.match("^[a-zA-Z]+$", word):
            msg = bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            bot.register_next_step_handler(msg, add_word_get_word)
            return

        user_current_word[message.chat.id] = {'word': word}
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:")
        bot.register_next_step_handler(msg, add_word_get_translation)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ add_word_to_db: {e}")
        bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def add_word_get_translation(message):
    try:
        translate = message.text.lower()
        if not re.match("^[–∞-—è–ê-–Ø—ë–Å]+$", translate):
            msg = bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            bot.register_next_step_handler(msg, add_word_get_translation)
            return

        cid = message.chat.id
        word = user_current_word[cid]['word']
        add_user_word(cid, word, translate)
        total_words = get_count_user_words(cid)
        bot.send_message(cid, f'–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: {total_words}.')
        userStep[cid] = 0
        create_words(message)

    except Exception as e:
        logging.exception(
            f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ add_word_get_translation: {e}")
        bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    try:
        words = get_user_added_words(cid)

        if not words:
            bot.send_message(
                message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        markup = types.InlineKeyboardMarkup()
        for word_id, word, translation in words:
            button_text = f"{word} ({translation})"
            callback_data = f"delete_word_confirm:{word_id}"
            button = types.InlineKeyboardButton(
                text=button_text, callback_data=callback_data)
            markup.add(button)

        bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ delete_word: {e}")
        bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_word_confirm:'))
def delete_word_confirmation(call):
    cid = call.message.chat.id
    try:
        word_id = call.data.split(':')[1]
        user_id = cid

        delete_words(word_id, user_id)
        bot.send_message(cid, '–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ')
        create_words(call.message)

    except Exception as e:
        logging.exception(
            f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ delete_word_confirmation: {e}")
        bot.send_message(
            call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ['–û—Ç–ª–∏—á–Ω–æ!‚ù§', hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint('–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!',
                             f'–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ RU - {data['translate_word']}')
        markup.add(*buttons)
        bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)


